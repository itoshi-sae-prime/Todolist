<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
<!-- import React, { FC, useState } from 'react';
import { ITodo } from '../interfaces';
import { nanoid } from 'nanoid'
import { customAlphabet } from 'nanoid';
const TodoList: FC = () => {
    const [task, setTask] = useState<string>('');
    const [deadline, setDeadline] = useState<number>(0);
    const [todo, setTodo] = useState<ITodo[]>([]);
    const [toggle, settoggle] = useState<boolean>(false);
    const [idsub, setIdsub] = useState<string>('');
    // const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    //     if (e.target.name === 'task') {
    //         setTask(e.target.value);
    //     } else {
    //         setDeadline(Number(e.target.value));
    //     }
    // };

    const handleChangeTask = (e: React.ChangeEvent<HTMLInputElement>): void => {
        setTask(e.target.value);
    }
    const handleChangeDeadline = (e: React.ChangeEvent<HTMLInputElement>): void => {
        setDeadline(Number(e.target.value));
    }

    const addTask = (): void => {
        if (!task) {
            alert('Please fill the task and deadline');
            return;
        };
        const nanoId = nanoid();
        // Tạo một hàm tùy chỉnh sử dụng chỉ ký tự số từ 0 đến 9
        const generateNumericId = customAlphabet('0123456789', 6);

        // Tạo một ID ngẫu nhiên có 6 ký tự số
        const id = generateNumericId();
        const newTask = { id, task: task, deadline: deadline }
        setTodo((prev) => [...prev, newTask])
        setTask('');
        setDeadline(0);
    };
    console.log(todo);
    const completeTask = (taskNameToDelete: string): void => {
        // setTodo(
        //     todo.filter((task) => {
        //         return task.task !== taskNameToDelete;
        //     })
        // );
        setTodo((prev) => prev.filter((task) => task.task !== taskNameToDelete));
    };
    const editTask = (id: string, taskEdit: string, deadlineEdit: number): void => {
        settoggle(true);
        setTask(taskEdit);
        setDeadline(deadlineEdit);
        setIdsub(id.toString());
        // tim id trong todo va update

    }
    const updateTask = (): void => {
        const index = todo.findIndex((task) => task.id === idsub);
        const newTodo = [...todo];
        newTodo[index] = { id: idsub, task: task, deadline: deadline };
        setTodo(newTodo);
    }
    // const editTask1 = () => {
    //     editTask(task, deadline);
    // }


    return (
        <div className="h-full bg-orange-300">
            <div className="text-center">To-Do-List</div>
            <div className='flex justify-center items-center bg-orange-500 h-[200px]'>
                <div className='flex'>
                    <div className='grid gap-y-[5px]'>
                        <input
                            name='task'
                            className='border-[2px] block border-black p-[5px] w-[450px]'
                            type='text'
                            placeholder='Task'
                            value={task}
                            onChange={handleChangeTask} />
                        <input
                            name='deadline'
                            className='border-[2px] block border-black p-[5px]'
                            type='number'
                            value={deadline}
                            placeholder='Deadline...'
                            onChange={handleChangeDeadline} />
                    </div>
                    <div className='flex justify-center items-center mx-[5px] border-[2px] bg-red-500'>
                        <button onClick={addTask} className='p-[10px] font-bold'>Add Task</button>
                    </div>
                    {
                        toggle && <div className='flex justify-center items-center mx-[5px] border-[2px] bg-blue-500'>
                            <button onClick={updateTask} className='p-[10px] font-bold'>Update</button>
                        </div>
                    }
                </div>
            </div>
            <div className='grid justify-center items-center py-[20px] bg-orange-300 h-full'>
                <div className='grid gap-y-[5px]'>
                    {
                        todo.map((task, index) => (
                            <div key={index} className='border-[2px] p-[2px] text-white bg-gray-50'>
                                <div className='flex justify-between bg-amber-700'>
                                    <p className='uppercase p-[10px] w-[250px] text-center'>{task.task}</p>
                                    <p className='uppercase py-[10px] px-[20px] bg-amber-300 w-[100px] text-center'>{task.deadline}</p>
                                    <button onClick={() => editTask(task.id, task.task, task.deadline)} className='uppercase py-[10px] px-[20px] bg-green-500 w-[100px] text-center'>Fix</button>
                                    <button onClick={() => completeTask(task.task)} className='uppercase py-[10px] px-[20px] bg-red-500 w-[100px] text-center'>Delete</button>
                                </div>
                            </div>
                        ))
                    }
                </div>
            </div>
        </div>


    )
};
export default TodoList; -->
<!-- import { FC, useState } from "react";
import { ITodo } from '../interface2';
import { nanoid } from "nanoid";
import { customAlphabet } from "nanoid";
const ToDoList2: FC = () => {
    const dataLists = [
        {
            id: 1,
            name: 'Task 1',
            date: '2021-09-10',
            priority: 'High',
            note: 'Note 1'
        },
        {
            id: 2,
            name: 'Task 2',
            date: '2021-09-11',
            priority: 'Medium',
            note: 'Note 2'
        },
        {
            id: 3,
            name: 'Task 3',
            date: '2021-09-12',
            priority: 'Low',
            note: 'Note 3'
        },
        {
            id: 4,
            name: 'Task 1',
            date: '2021-09-10',
            priority: 'High',
            note: 'Note 1'
        },
        {
            id: 5,
            name: 'Task 2',
            date: '2021-09-11',
            priority: 'Medium',
            note: 'Note 2'
        },
        {
            id: 6,
            name: 'Task 3',
            date: '2021-09-12',
            priority: 'Low',
            note: 'Note 3'
        },
        {
            id: 3,
            name: 'Task 3',
            date: '2021-09-12',
            priority: 'Low',
            note: 'Note 3'
        },
        {
            id: 4,
            name: 'Task 1',
            date: '2021-09-10',
            priority: 'High',
            note: 'Note 1'
        },
        {
            id: 5,
            name: 'Task 2',
            date: '2021-09-11',
            priority: 'Medium',
            note: 'Note 2'
        },
        {
            id: 6,
            name: 'Task 3',
            date: '2021-09-12',
            priority: 'Low',
            note: 'Note 3'
        }
    ]
    const [id, setId] = useState<string>('');
    const [task, setTask] = useState<string>('');
    const [date, setDate] = useState<string>('');
    const [todo, setTodo] = useState<ITodo[]>([]);
    const [toggle, settoggle] = useState<boolean>(false);
    const [idsub, setIdsub] = useState<string>('');
    const handleChangeTask = (e: React.ChangeEvent<HTMLInputElement>): void => {
        setTask(e.target.value);
    }
    const handleChangeDate = (e: React.ChangeEvent<HTMLInputElement>): void => {
        setDate(e.target.value);
    }
    const addList = (): void => {
        if (task === '' || date === '') {
            alert('Please fill the task and date');
            return;
        }
        const nanoId = nanoid();
        const generateNumericId = customAlphabet('0123456789', 3);
        const id = generateNumericId();
        const newTodo1 = { id, task: task, date: date }
        setTodo((prev) => [...prev, newTodo1]);
        setTask('');
        setDate('');
    }
    const deleteList = (id: string): void => {
        const newTodo = todo.filter((item) => item.id !== id);
        setTodo(newTodo);
    }
    const editList = (id: string, taskEdit: string, dateEdit: string): void => {
        setTask(taskEdit);
        setDate(dateEdit);
        settoggle(true);
        setIdsub(id.toString());
    }
    const updateList = (): void => {
        settoggle(false);
        const index = todo.findIndex((item) => item.id === idsub);
        const newTodo = [...todo];
        newTodo[index] = { id: idsub, task: task, date: date };
        setTodo(newTodo);
        setTask('');
        setDate('');
    }
    return (
        <div className="m-[20px] border-2 border-orange-200 p-5">
            <div className="Header grid grid-cols-4">
                <div className="text-center">
                    <div className="text-[30px] font-semibold border-2 border-orange-300 border-dashed px-[50px] text-orange-300">TO  DO  LIST</div>
                </div>
                <div className="flex justify-start items-end px-[20px]">
                    <div className="text-[20px] font-semibold inline-block text-orange-400">Name:</div>
                    <input
                        onChange={handleChangeTask}
                        name='task'
                        value={task}
                        type="text"
                        className="border-b-2 w-[70%] mx-[10px] text-orange-700"
                        style={{ outline: 'none' }} />
                </div>
                <div className="flex justify-start items-end px-[20px]">
                    <div className="text-[20px] text-orange-400 font-semibold inline-block text-orange-4x00">Date:</div>
                    <input
                        onChange={handleChangeDate}
                        name='date'
                        value={date}
                        type="text"
                        className="border-b-2 w-[70%] mx-[10px] text-orange-700"
                        style={{ outline: 'none' }} />
                </div>
                <div className="flex justify-start items-end px-[20px]">
                    <button
                        onClick={addList}
                        className="bg-orange-400 text-white 
                    font-semibold text-[20px] px-[20px] py-[5px] 
                    w-full uppercase
                    rounded-lg">Add To Do List</button>
                </div>
            </div>
            <div className="flex">
                <div className="w-[25%] mt-[20px]">
                    <div className=" bg-orange-200 h-auto">
                        <div className="text-center pt-[5px] text-[25px] uppercase font-semibold text-orange-400">Priorities</div>
                        <div className="pb-[30px]">                           {
                            dataLists.slice(0, 6).map((item, index) => {
                                return (
                                    <div key={index} className="flex justify-between items-center px-[20px] py-[10px]">
                                        <div className="font-semibold text-[20px] text-orange-400 mr-[10px]">{item.id}</div>
                                        <input type="text" className="w-full bg-orange-200 border-b-2 border-orange-400 text-orange-600 uppercase font-bold"
                                            style={{ outline: 'none' }} />
                                    </div>
                                )
                            })
                        }
                        </div>
                    </div>
                    <div className="bg-red-400 h-[250px] my-[20px]">
                        <div className=" bg-orange-200 h-auto">
                            <div className="text-center pt-[5px] text-[25px] uppercase font-semibold text-orange-400">Note</div>
                            <div className="pb-[27px]">                           {
                                dataLists.slice(0, 4).map((item, index) => {
                                    return (
                                        <div key={index} className="flex justify-between items-center px-[20px] py-[10px]">
                                            <div className="font-semibold text-[20px] text-orange-400 mr-[10px]">{item.id}</div>
                                            <input type="text" className="w-full bg-orange-200 border-b-2 border-orange-400 text-orange-600 uppercase font-bold"
                                                style={{ outline: 'none' }} />
                                        </div>
                                    )
                                })
                            }
                            </div>
                        </div>
                    </div>
                </div>
                <div className="w-[75%] mt-[20px] ml-[25px] bg-orange-200">
                    <div className="text-center pt-[5px] text-[35px] uppercase font-semibold text-orange-400 border-b-2 border-orange-400">To Do List</div>
                    <div className="">
                        <div className="flex mt-[10px] mx-[40px]">
                            <div className="mb-[5px] font-semibold w-[10%] text-[20px] text-orange-800">STT</div>
                            <div className="mb-[5px] font-semibold w-[12%] text-[20px] text-orange-800">DATE</div>
                            <div className="mb-[5px] font-semibold w-[70%] text-[20px] text-orange-800">LIST</div>
                        </div>
                        {
                            todo.map((item, index) => {
                                return <div>
                                    <div className="flex justify-center items-center mx-[40px] py-[10px]">
                                        <div className="font-semibold w-[10%] text-[20px] text-orange-800">
                                            <div className="">{item.id}</div>
                                        </div>
                                        <div className="font-semibold w-[12%] text-[20px] text-orange-800">
                                            <div className="">{item.date}</div>
                                        </div>
                                        <div className="font-semibold w-[70%] text-[20px] text-orange-800 border-b-2 border-orange-500">
                                            <div className="">{item.task}</div>
                                        </div>
                                        <button onClick={() => deleteList(item.id)} className="text-[20px] px-[10px] bg-orange-500 ml-[10px] font-semibold text-white">X</button>
                                        <button onClick={() => editList(item.id, item.task, item.date)} className="text-[20px] px-[10px] bg-orange-500 ml-[10px] font-semibold text-white">C</button>
                                        {
                                            toggle && <button onClick={updateList} className="text-[20px] px-[10px] bg-orange-500 ml-[10px] font-semibold text-white">U</button>
                                        }
                                    </div>
                                </div>
                            })
                        }
                    </div>
                </div>
            </div>
            <div className="w-full h-auto bg-orange-200 mt-[20px] flex justify-center items-center text-[40px] font-semibold uppercase text-orange-500 border-2 border-dashed border-white">Have a nice day bro </div>
        </div>
    )
}
export default ToDoList2; -->